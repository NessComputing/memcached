#!/usr/bin/env ruby

# Launcher script for standalone JARs, packaged in a galaxy tar.gz
# Assumes that there is a lone .jar file in the root of the package
# which has an appropriate manifest Main-Class and Classpath

# If Galaxy is to start and stop processes, a bin/launcher script is
# also required. This script takes one of "start", "stop", "restart", or
# "status", and returns with exit status 0 (stopped), 1 (running), or 2
# (unknown).

=begin

launcher command

Commands:
start
stop
restart
status

Commands return

0 - Stopped
1 - Running 
2 - Unknown
=end

require 'timeout'
require 'yaml'
require 'rubygems'
require 'galaxy/scripts'

@scripts = Galaxy::ScriptSupport.new ARGV
@log = Logger.new(STDOUT)

PID_FILE = File.join(@scripts.base, 'launcher.pid')
LOG_FILE = File.join(@scripts.base, 'launcher.log')

# Check whether a given process PID is alive or not.
def is_alive pid
  begin
    return Process.kill(0, pid) == 1
  rescue Errno::ESRCH
    return false
  end
end

# Load Process PID
def load_pid pid_file=PID_FILE
  pid = nil

  begin
    File.open pid_file do |f|
      pid = f.read.to_i
    end

    pid = nil unless is_alive pid
  rescue Errno::ENOENT
    pid = nil
  end

  return pid
end


# Save Process PID
def save_pid pid
  File.open PID_FILE, 'w' do |f|
    f.puts pid
  end
end

#
# Wait for a child process to die.
#
def wait_stopped pid
  loop do
    break unless is_alive pid
    sleep 0.1
  end
end

def load_options options_file="memcached.conf"
  information=@scripts.get_slot_variables
  repository = Galaxy::Repository.new information["env.config_location"], @log
  sources = repository.walk(@scripts.config_path, options_file)

  options = {} 

  sources.each do |source_file|
    source_file.each do |line|
      line.strip!
      if (line[0] != ?# and line[0] != ?=)
        index = line.index('=')
        if (index)
          options[line[0..index - 1].strip] = line[index + 1..-1].strip
        else
          options[line] = nil
        end
      end
    end
  end

  options
end

#
# Ness specific piece that picks up the global discovery
# config and converts it into memcache digestible settings
#
def ness_special_sauce options
  # Find the right node path from config.properties
  config = load_options "config.properties"

  if options['zookeeper-node-path'].nil?
    options['zookeeper-node-path'] = config['ness.discovery.root']
  end

  # Connect string is a bit more complicated
  if options['zookeeper-connect-string'].nil?
    # If an explicit connect string is given, use that.
    if !config['ness.zookeeper.clientConnect'].nil?
      options['zookeeper-connect-string'] = config['ness.zookeeper.clientConnect']
    else
      # Otherwise, build it from the server settings.
      client_port = config['ness.zookeeper.clientPort']
      connect_string = []
      server = 1
      server_config = config["ness.zookeeper.server.#{server}"]
      while ! server_config.nil?
        connect_string << server_config.split(":")[0] + ":" + client_port
        server = server + 1
        server_config = config["ness.zookeeper.server.#{server}"]
      end
      options['zookeeper-connect-string'] = connect_string.join(',')
    end
  end

  options
end


#
# Executes the actual child process. 
# Reopens stdout and stderr to the general
# log file.
def execute
  STDOUT.reopen LOG_FILE, 'a'
  STDERR.reopen STDOUT

  Dir.chdir @scripts.base

  options = load_options "memcached.conf"

  options = ness_special_sauce options



#
# end ness specific piece
#

  command_line = options.inject('') do |memo, (option,value)| 
    memo << " --#{option}"
    memo << " #{value}" unless value.nil?
    memo
  end

  galaxy=@scripts.get_java_galaxy_env.join(' ')

  STDERR.puts "=" * 72
  STDERR.puts "=== options: #{command_line}"
  STDERR.puts "=== galaxy:  #{galaxy}"
  STDERR.puts "=" * 72

  puts "starting memcached..."
  command="./memcached #{command_line}"
  exec command
end

# Start command
def start
  pid = load_pid

  unless pid.nil?
    puts "Already running as #{pid}."
    return 2
  end

  pid = fork { execute }

  Process.detach pid
  save_pid pid
  puts "Started as #{pid}."
  return 0
end

# Stop command
def stop
  pid = load_pid

  if pid.nil?
    puts 'Not running.'
    return 0
  else
    Process.kill Signal.list['INT'], pid
    wait_stopped pid
    return 0
  end
end

# Status command
def status
  pid = load_pid

  if pid.nil?
    puts 'Not running.'
    return 0
  else
    puts "Running as #{pid}."
    return 1
  end
end

# Restart Command
def restart
  stop
  start
end

Dir.chdir @scripts.base

exit case @scripts.rest[0]
when 'start'
  start
when 'stop'
  stop
when 'restart'
  restart
when 'status'
  status
else
  puts "Unknown Command: #{@scripts.rest[0]}!"
  2
end
