Building
========

- install the zookeeper libs in /usr/local

./autogen.sh
./configure --with-zookeeper --enable-static
make

Getting Zookeeper
=================

Neither Ubuntu nor Fedora include an usable zookeeper
installation. Get the latest one (3.3.3) from zookeeper.apache.org,
unpack it and run "./configure ; make; make install" in the src/c
tree. Then move everything in /usr/local/include/c-client-src/* into
/usr/local/include.

You will need at least

include/recordio.h
include/zookeeper.h
include/zookeeper.jute.h
include/zookeeper_log.h
include/zookeeper_version.h
lib/libzookeeper_st.a
lib/libzookeeper_st.la
lib/libzookeeper_st.so
lib/libzookeeper_st.so.2
lib/libzookeeper_st.so.2.0.0

in a folder to build memcached with zookeeper.


Static binary on Fedora Linux
============================= 

For ideologic reasons, Fedora Linux does not ship with the static
versions of libuuid and libjson.

Download the most recent versions of these packages:

% yumdownloader --source libuuid
% yumdownloader --source json-c

apply the patches in the ness subdirectory and rebuild the packages.

Then build the memcache with --enable-static


Static binary on Ubuntu Linux (10.04 LTS)
=========================================

Install libevent-dev, uuid-dev, libjson0-dev. Don't use the zookeeper
included with Ubuntu (it is 3.2.2 and it only includes the _mt
libraries, not the single threaded ones).

Apart from that, Ubuntu is delightfully uneventful, which makes for a
nice change.


Memcached configuration
=======================

Place a memcached.conf file in galaxy. This file has the same format
as a properties file; keys are the long options for memcached.

e.g.

--- cut ---
port=#{private.port.0}
listen=#{internal.ip}
verbose
protocol=auto
--- cut ---

Service Discovery
=================

The launcher.memcached picks up the discovery config from config.properties. No need to add it
to the memcached configuration file.

Galaxy 
======

The 'galaxy' folder contains the necessary pieces to integrate memcached with galaxy. 

- make sure that all the pieces are checked into git. 'make_tarball.sh' use the git
  version tag to build the tarball name.
- build memcached static and with zookeeper support (see above).
- get the current set of galaxy scripts. Modify 'make_tarball.sh' to point at the scripts.
- run 'make_tarball.sh'.
- make sure that the resulting tarball does not clobber an existing name.
- upload the resulting tarball to depot.

If you can make no sense of these instructions: They are Ness
specific, so working at Ness really helps, because then you can ask
Henning to build it. :-)

Long Command line options
=========================

To produce more readable confguration files (I mean, seriously, how
can you guys stand a config file that consist of one-letter options?),
the ness memcached supports long command line options:

-p --port <num>                TCP port number to listen on (default: 11211)

-U --udp-port <num>            UDP port number to listen on (default: 11211, 0 is off)

-s --socket-path <file>        UNIX socket path to listen on (disables network support)

-a --access-mask <mask>        access mask for UNIX socket, in octal (default: 0700)

-l --listen <addr>             interface to listen on (default: INADDR_ANY, all addresses)
                               <addr> may be specified as host:port. If you don't specify
                               a port number, the value you specified with -p or -U is
                               used. You may specify multiple addresses separated by comma
                               or by using -l multiple times

-d --daemonize                 run as a daemon

-r --max-core-file-limit       maximize core file limit

-u --user <username>           assume identity of <username> (only when run as root)

-m --max-memory <num>          max memory to use for items in megabytes (default: 64 MB)

-M --error-on-memory-exhausted return error on memory exhausted (rather than removing items)

-c --max-connections <num>     max simultaneous connections (default: 1024)

-k --lock-memory               lock down all paged memory.  Note that there is a
                               limit on how much memory you may lock.  Trying to
                               allocate more than that would fail, so be sure you
                               set the limit correctly for the user you started
                               the daemon with (not for -u <username> user;
                               under sh this is done with 'ulimit -S -l NUM_KB').

-v --verbose                   verbose (print errors/warnings while in event loop)
-vv                            very verbose (also print client commands/reponses)
-vvv                           extremely verbose (also print internal state transitions)

-h --help                      print this help and exit

-i --info                      print memcached and libevent license

-P --pid-file <file>           save PID in <file>, only used with -d option

-f --slab-factor <factor>      chunk size growth factor (default: 1.25)

-n --slab-chunk-size <bytes>   minimum space allocated for key+value+flags (default: 48)

-L --large-memory-pages        Try to use large memory pages (if available). Increasing
                               the memory page size could reduce the number of TLB misses
                               and improve the performance. In order to get large pages
                               from the OS, memcached will allocate the total item-cache
                               in one large chunk.

-D --prefix-delimiter <char>   Use <char> as the delimiter between key prefixes and IDs.
                               This is used for per-prefix stats reporting. The default is
                               ":" (colon). If this option is specified, stats collection
                               is turned on automatically; if not, then it may be turned on
                               by sending the "stats detail on" command to the server.

-t --threads <num>             number of threads to use (default: 4)

-R --max-requests-per-event    Maximum number of requests per event, limits the number of
                               requests process for a given connection to prevent 
                               starvation (default: 20)

-C --disable-cas               Disable use of CAS

-b --backlog-limit             Set the backlog queue limit (default: 1024)

-B --protocol                  Binding protocol - one of ascii, binary, or auto (default)

-I --max-item-size             Override the size of each slab page. Adjusts max item size
                               (default: 1mb, min: 1k, max: 128m)

-Z --zookeeper-connect-string <connect>  Zookeeper connect string

-z --zookeeper-node-path <path>          Path for Zookeeper announcement

-N --ness-service-name <name>            The service name to announce

-T --ness-service-type <type>            The service type to announce
